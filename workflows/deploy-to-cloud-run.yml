name: "Build and Deploy to Cloud Run"

on:
  workflow_call:
    inputs:

      repo:
        required: true
        type: string

      image:
        required: true
        type: string
      
      tag:
        required: false
        type: string
        default: latest
      
      region:
        required: false
        type: string
        default: us-central1
      
      registry:
        required: false
        type: string
        default: us-docker.pkg.dev
      
      build_args:
        required: false
        type: string
      
      ssh_keys:
        required: false
        type: string

      secrets:
        required: false
        type: string
      
      secret_files:
        required: false
        type: string
    
    secrets:
      service_account:
        required: true
      
      workload_identity_provider:
        required: true
      
      project_id:
        required: true
      
      encryption_key:
        required: false

env:
  PROJECT_ID: ${{ secrets.project_id }}
  REGION: ${{ inputs.region }}
  REPO: ${{ inputs.repo }}
  IMAGE: ${{ inputs.image }}
  DOCKER_TAG: ${{ inputs.tag }}
  REGISTRY: ${{ inputs.registry }}

jobs:
  deploy-to-cloud-run:
    permissions:
      contents: 'read'
      id-token: 'write'
      
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: GCP authentication
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.service_account }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
      
      - name: Configure Docker for GCP
        run: gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      - name: Set up SSH keys
        if: ${{ inputs.ssh_keys }} 
        id: set_up_ssh_keys
        run: |-
          mkdir /home/runner/.ssh /home/runner/.ssh/git-keys
          ssh_keys_paths=""

          decrypted_ssh_keys=$(echo -n "${{ inputs.ssh_keys }}" | base64 -d | openssl enc -d -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.encryption_key }}")

          while IFS= read -r entry; do
            key=$(echo "$entry" | jq -r '.key')
            value=$(echo "$entry" | jq -r '.value')

            echo "$value" | tr -d '\r' > "/home/runner/.ssh/git-keys/$key"
            chmod 600 "/home/runner/.ssh/git-keys/$key"

            ssh_keys_path="${ssh_keys_path}${key}=/home/runner/.ssh/git-keys/$key\n"
          done < <(echo "$decrypted_ssh_keys" | jq -c 'to_entries[]')
        
          echo "ssh_keys_path<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "${ssh_keys_path%\\n}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      
      - name: Set up secrets
        if: ${{ inputs.secrets }} 
        id: set_up_secrets
        run: |-
          secrets=""

          decrypted_secrets=$(echo -n "${{ inputs.secrets }}" | base64 -d | openssl enc -d -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.encryption_key }}")

          while IFS= read -r entry; do
            key=$(echo "$entry" | jq -r '.key')
            value=$(echo "$entry" | jq -r '.value')

            secrets="${secrets}${key}=${value}\n"
          done < <(echo "$decrypted_secrets" | jq -c 'to_entries[]')
        
          echo "secrets<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "${secrets%\\n}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Set up secret files
        if: ${{ inputs.secret_files }} 
        id: set_up_secret_files
        run: |-
          mkdir /home/runner/secret_files
          secret_files_paths=""

          decrypted_secret_files=$(echo -n "${{ inputs.secret_files }}" | base64 -d | openssl enc -d -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.encryption_key }}")

          while IFS= read -r entry; do
            key=$(echo "$entry" | jq -r '.key')
            value=$(echo "$entry" | jq -r '.value')

            echo "$value" | tr -d '\r' > "/home/runner/secret_files/$key"
            chmod 600 "/home/runner/secret_files/$key"

            secret_files_path="${secret_files_path}${key}=/home/runner/secret_files/$key\n"
          done < <(echo "$decrypted_secret_files" | jq -c 'to_entries[]')
        
          echo "secret_files_path<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "${secret_files_path%\\n}" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}-
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            GITHUB_SHA=${{ github.sha }}
            GITHUB_REF=${{ github.ref }}
            ${{ inputs.build_args || '' }}
          ssh: |
            ${{ steps.set_up_ssh_keys.outputs.ssh_keys_path || '' }}
          secrets: |
            ${{ steps.set_up_secrets.outputs.secrets || '' }}
          secret-files: |
            ${{ steps.set_up_secret_files.outputs.secret_files_path || '' }}
      
      - name: Deploy Cloud Run Revision
        run: |-
          gcloud run deploy ${{ env.IMAGE }} \
            --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE }}:${{ env.DOCKER_TAG }} \
            --region ${{ env.REGION }}
      
      - name: Clean up secret files
        if: ${{ inputs.ssh_keys }} 
        run: |
          rm -rf /home/runner/.ssh/git-keys